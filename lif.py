# -*- coding: utf-8 -*-
"""LIF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GXjjk1s9GhlAVEwxJFBO2Lj_pepA3nX-
"""

import numpy as np
import matplotlib.pyplot as plt

# ----------------- Parameters ------------------
T = 200           # total time in ms
dt = 0.1          # time step in ms
time = np.arange(0, T + dt, dt)

# Neuron model parameters
tau_m = 20        # membrane time constant (ms)
R = 1             # membrane resistance (MÎ©)
V_th = -50        # spike threshold (mV)
V_reset = -65     # reset voltage (mV)
V_rest = -65      # resting potential (mV)
spike_peak = 30   # artificial spike height for plotting

# ----------------- Input Current Options ------------------

# 1. Constant current
I_constant = np.ones_like(time) * 1.2

# 2. Step current: turns on at 50ms
I_step = np.zeros_like(time)
I_step[int(50/dt):int(150/dt)] = 1.5

# 3. Noisy current: baseline + Gaussian noise
I_noise = np.ones_like(time) * 1.0
np.random.seed(0)
I_noise += np.random.normal(0, 0.3, size=time.shape)

# Choose one:
I = I_step  # You can change to I_constant or I_noise

# ----------------- Simulation ------------------

V = np.zeros_like(time)
V[0] = V_rest
spike_times = []

for t in range(1, len(time)):
    dV = (-(V[t-1] - V_rest) + R * I[t-1]) / tau_m
    V[t] = V[t-1] + dV * dt

    if V[t] >= V_th:
        V[t] = spike_peak
        spike_times.append(time[t])
        if t + 1 < len(time):
            V[t + 1] = V_reset

# ----------------- Plotting ------------------

fig, ax = plt.subplots(2, 1, figsize=(10, 6), sharex=True)

# Plot membrane potential
ax[0].plot(time, V, label="Membrane Potential", color="blue")
ax[0].axhline(V_th, color='r', linestyle='--', label="Threshold")
ax[0].set_ylabel("Membrane Potential (mV)")
ax[0].set_title("LIF Neuron Simulation")
for spike in spike_times:
    ax[0].axvline(spike, color='k', linestyle=':', alpha=0.5)
ax[0].legend()
ax[0].grid(True)

# Plot input current
ax[1].plot(time, I, color='darkgreen', label="Input Current")
ax[1].set_ylabel("Input (nA)")
ax[1].set_xlabel("Time (ms)")
ax[1].grid(True)
ax[1].legend()

plt.tight_layout()
plt.show()